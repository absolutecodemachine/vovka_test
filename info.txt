Это приложение на Go предназначено для анализа данных матчей из двух источников — Sansabet и Pinnacle, их сопоставления и отправки результатов на фронтенд в режиме реального времени через WebSocket соединения.
Глобальные переменные и структуры данных

    MatchData: содержит JSON-данные матча и время последнего обновления.
    MatchPair: хранит информацию о сопоставленных матчах между Sansabet и Pinnacle.
    ParsedMessage: структура для хранения распарсенных данных сообщения от источников.
    matchData: карта, хранящая данные матчей по источникам и уникальным ключам.
    matchPairs: список сопоставленных пар матчей.
    matchKeys: карта для отслеживания уникальных ключей матчей и предотвращения дубликатов.
    frontendClients: карта WebSocket соединений с фронтендом.
    sansabetConns, pinnacleConns: карты WebSocket соединений с парсерами Sansabet и Pinnacle.
    Мьютексы: используются для синхронизации доступа к общим ресурсам.

Основные функции
initDB()

Инициализирует подключение к базе данных MySQL, используя предоставленный DSN. При неудаче приложение завершает работу с ошибкой.
startAnalyzer()

Запускает основные горутины приложения:

    startParserServer для Sansabet на порту 7100.
    startParserServer для Pinnacle на порту 7200.
    startFrontendServer на порту 7300.
    processPairs() — обработка сопоставленных пар матчей.

startParserServer(port int, sourceName string)

Запускает WebSocket сервер для приема данных от парсеров.

    sourceName определяет, какой парсер подключается (Sansabet или Pinnacle).
    При получении сообщения от парсера, данные передаются в функцию saveMatchData для обработки.

startFrontendServer()

Запускает WebSocket сервер для подключения фронтенда.

    При подключении клиента, соединение сохраняется в frontendClients.
    Сообщения от клиентов игнорируются; сервер только отправляет данные клиентам.

saveMatchData(name string, msg []byte)

Обрабатывает полученные данные от парсеров:

    Проверяет сообщение на пустоту; если оно пустое, удаляет устаревшие данные.
    Парсит сообщение с помощью parseMessage.
    Проверяет наличие команд в базе данных и добавляет их при необходимости (ensureTeamsExist).
    Если источник — Sansabet, пытается сопоставить команды с Pinnacle (linkTeamsForMatch и updateMatchPairs).
    Сохраняет данные матча в matchData.
    Запускает обработку пар матчей и отправку данных на фронтенд.

parseMessage(name string, msg []byte) (*ParsedMessage, error)

Парсит JSON-сообщение от источника и извлекает информацию о матче.

    Разделяет MatchName на домашнюю и гостевую команды с помощью splitMatchName.

splitMatchName(matchName, source string) []string

Разделяет название матча на домашнюю и гостевую команды, используя соответствующий разделитель для источника (например, " : " для Sansabet).
ensureTeamsExist(source, home, away, league string)

Проверяет наличие команд в базе данных с помощью teamExists и добавляет их при необходимости с помощью insertTeam.
teamExists(source, teamName, league string) bool

Проверяет, существует ли команда в таблице соответствующего источника в базе данных.
insertTeam(source, teamName, league string)

Добавляет новую команду в базу данных в таблицу соответствующего источника.
linkTeamsForMatch(home, away string) (bool, string, string)

Проверяет, связаны ли команды из Sansabet с Pinnacle:

    Использует linkTeam для проверки каждой команды.
    Возвращает флаги наличия связей и сами названия команд.

linkTeam(teamName string) bool

Проверяет, есть ли у команды из Sansabet ссылка на Pinnacle ID в базе данных.
updateMatchPairs(parsedMsg *ParsedMessage)

Обновляет список сопоставленных пар матчей:

    Генерирует ключ матча с помощью generateMatchKey.
    Проверяет, не существует ли уже пара с таким ключом.
    Получает Pinnacle ID для команд и при необходимости пытается найти недостающие данные с помощью findMissingTeamInMatchData и getPinnacleIdDirectly.
    Создает новую пару MatchPair и добавляет ее в matchPairs.

findMissingTeamInMatchData(knownTeam string) (string, error)

Ищет недостающую команду в данных Pinnacle, зная одну из команд.
getTeamNameByPinnacleId(pinnacleId int) (string, error)

Получает название команды по Pinnacle ID из базы данных.
getPinnacleIdDirectly(teamName string) (int, error)

Получает Pinnacle ID напрямую по названию команды из базы данных.
generateMatchKey(home, away string) string

Генерирует уникальный ключ для матча, используя SHA1 хеширование названий команд.
processPairs()

Обрабатывает пары матчей:

    Копирует локально matchData для минимизации блокировок.
    Удаляет устаревшие матчи.
    Запускает отправку текущих матчей на фронтенд.

logMatchPairs()

Логирует текущее содержимое matchPairs.
groupResultsByMatch(pairs []MatchPair) []map[string]interface{}

Группирует результаты по матчам, находя общие исходы и вычисляя ROI.
processPairAndGetResult(pair MatchPair) map[string]interface{}

Обрабатывает одну пару матчей и возвращает результат для отправки на фронтенд:

    Проверяет наличие данных для обеих команд.
    Находит общие исходы с помощью findCommonOutcomes.
    Вычисляет и фильтрует исходы с помощью calculateAndFilterCommonOutcomes.

findCommonOutcomes(sansabetData, pinnacleData string) map[string][2]float64

Находит общие исходы между Sansabet и Pinnacle.
calculateROI(sansaOdd, pinnacleOdd float64) float64

Вычисляет ROI на основе коэффициентов Sansabet и Pinnacle.
getExtraPercent(pinnacleOdd float64) float64

Возвращает дополнительный процент на основе коэффициента Pinnacle.
calculateAndFilterCommonOutcomes(commonOutcomes map[string][2]float64) []map[string]interface{}

Вычисляет ROI для общих исходов и фильтрует их по заданным критериям.
forwardToFrontendBatch(results []map[string]interface{})

Отправляет результаты на подключенные фронтенд клиенты через WebSocket:

    Кодирует результаты в JSON.
    Отправляет данные каждому клиенту, удаляя из списка тех, с кем связь потеряна.

main()

Точка входа в программу:

    Инициализирует базу данных.
    Запускает анализатор.
    Использует select {} для блокировки основной горутины и поддержания работы приложения.

Примечания:

    Многопоточность и синхронизация: Для обеспечения корректной работы с общими ресурсами используются мьютексы (sync.Mutex, sync.RWMutex).
    WebSocket соединения: Используются для получения данных от парсеров и отправки данных на фронтенд.
    База данных: Приложение активно взаимодействует с базой данных для хранения и получения информации о командах и их связях.
    Логирование: В коде широко используется логирование для отслеживания процесса выполнения и отладки.

Как работает приложение:

    Получение данных от парсеров: Парсеры Sansabet и Pinnacle подключаются к соответствующим серверам и отправляют данные о матчах.

    Обработка данных: При получении новых данных они парсятся, команды проверяются на наличие в базе данных и добавляются при необходимости.

    Сопоставление матчей: Если команды из Sansabet связаны с Pinnacle, создается пара матчей.

    Анализ исходов: Общие исходы между Sansabet и Pinnacle находятся, вычисляется ROI для каждого из них.

    Отправка данных на фронтенд: Результаты анализа отправляются подключенным клиентам на фронтенде через WebSocket.

    Обновление данных: Старые данные матчей удаляются, чтобы поддерживать актуальность информации.

Данное приложение позволяет в режиме реального времени анализировать коэффициенты от двух разных источников, сопоставлять их и предоставлять актуальную информацию для принятия решений на основе вычисленного ROI.